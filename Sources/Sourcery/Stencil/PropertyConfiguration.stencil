{% macro createSetter variable %}
    {{ variable.attributes.available }}
    func {{ variable.name }}(_ newValue: {{ variable.typeName }}) -> Self {
        return set { (configurable: {{ type.name }}) in
            configurable.{{variable.name}} = newValue
        }
    }
{% endmacro %}

{% macro newlineIfNotLast isLast %}
{% if not isLast %}

{% endif %}
{% endmacro %}

{% macro createVariablesForUIView %}
{% for variable in type.allVariables|instance|openSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% for variable in type.allVariables|instance|publicSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% for variable in type.allVariables|instance|internalSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% endmacro %}

{% macro createVariablesForUIViewSubclasses %}
{% for variable in type.variables|instance|openSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% for variable in type.variables|instance|publicSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% for variable in type.variables|instance|internalSet where variable.isMutable %}
{% call createSetter variable %}
{% call newlineIfNotLast forloop.last %}
{% endfor %}
{% endmacro %}

{% for type in types.implementing.SourceryGeneration|class %}
// sourcery:file:{{ type.name }}+PropertyConfigurationSet.swift
// swiftlint:disable line_length identifier_name colon

import UIKit

{{ type.attributes.available}}
public extension ConfigurationSet where Base: {{ type.name }} {
{% if type.name == "UIView"%}
    {% call createVariablesForUIView %}
{% else %}
    {% call createVariablesForUIViewSubclasses %}
{% endif %}
}
// sourcery:end
{% endfor %}
